# Cursor Rules

# 规则配置示例
# 这里可以添加自定义的 Cursor 规则 

# 代码风格和结构
- 编写简洁、可维护且技术准确的 JavaScript 代码，并附上相关示例。
- 使用函数式和声明式编程模式，避免使用类。
- 通过迭代和模块化来遵循 DRY 原则，避免代码重复。
- 使用描述性的变量名，并添加辅助动词（例如 `isLoading`、`hasError`）。
- 系统地组织文件：每个文件应仅包含相关的内容，例如导出的组件、子组件、辅助函数、静态内容和类型。

# 命名规范
- 使用小写和连字符作为目录名（例如 `components/auth-wizard`）。
- 使用命名导出来导出函数。

# 语法和格式
- 使用 `function` 关键字定义纯函数，以利用其提升机制和清晰性。
- 始终使用 Vue Composition API 的脚本设置语法。

# UI 和样式
- 使用 uniapp 进行组件开发和样式设计。
- 使用 rpx 单位实现响应式设计，采用移动端优先的方法。

# 性能优化
- 对于常用功能进行组件封装。
- 对非关键组件进行动态加载。
- 优化图片：使用 WebP 格式，包含尺寸数据，并实现懒加载。
- 在项目构建过程中，实施优化的代码块策略，例如代码分割，以生成更小的打包体积。

# 关键规范
- 对于关键代码进行必要的代码注释。
- 使用中文与我交流。
- 不要从文件中删除未编辑的内容。
- 不要将未更改的内容总结为"[其余内容保持不变]"。
- 在删除任何内容之前，请先确认。
- 关注更新和新增内容，而不是删除内容。
- 每次代码提交，请记录在项目根目录的 README 文件。 